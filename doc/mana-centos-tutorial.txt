This document outlines the necessary steps to take to install and compile MANA
on a new CentOS machine, as well as launch, checkpoint and restart a given MPI
application.

Root privileges are required to install some of the necessary packages.

A. INSTALLING AND COMPILING MANA

1. Installing essential packages - this section can be skipped depending on the
existing packages on your machine.

### CENTOS 7 ###

  $ yum install -y git
  $ yum groupinstall 'Development Tools'
  $ yum install -y mlocate vim wget
  $ yum install -y centos-release-scl
  $ yum install -y python3
  $ yum install -y devtoolset-8-gcc devtoolset-8-gcc-c++ glibc-static.x86_64
  $ echo 'source scl_source enable devtoolset-8' >> ~/.bashrc
  $ source ~/.bashrc

### INSTALLING DYNAMIC AND STATIC MPI LIBRARIES ###

On CentOS, MANA uses mpich-3.3.2, along with some other static libraries for
MPI function calls. Default packages for some essential libraries including
MPICH does not offer static versions of them. So, we'll need to install them
from the source first, then point MANA to these libraries through certain
environment variables while doing ./configure. A streamlined way of doing so is
provided through ./configure-mana. Note that these libraries have to be static.

Installing required libraries (as root):

a. Install libxml2
  $ yum install -y libxml2-static

b. Install zlib
  $ yum install -y zlib-static

c. Install libxz
  $ yum install -y xz-devel

d. Download and install liblzma
  $ yum install -y yum-utils.noarch
  $ mkdir liblzma_TEMP && cd liblzma_TEMP
  $ yumdownloader --source xz-devel
  $ rpm2cpio xz-5.2.2-1.el7.src.rpm | cpio -idv
  $ tar xf xz-5.2.2.tar.gz
  $ cd xz-5.2.2
  $ patch -Np1 < ../xz-5.2.2-compat-libs.patch
  $ patch -Np1 < ../xz-5.2.2-man-page-day.patch
  $ ./configure --enable-static
  $ make -j install
  $ cp ./src/liblzma/.libs/liblzma.a /usr/lib64/

e. Download and install mpich
  $ wget \
      https://www.mpich.org/static/downloads/3.3.2/mpich-3.3.2.tar.gz \
      --no-check-certificate
  $ tar xf mpich-3.3.2.tar.gz
  $ cd mpich-3.3.2
  $ ./configure
  $ make -j install

Installing required libraries (as non-root):

a. Download and install libpciaccess
  $ cd $HOME
  $ mkdir local_install
  $ mkdir libpciaccess
  $ cd libpciaccess
  # Either use `yumdownloader` (if source pkg is available) for installing the
    source of the default package:
      $ yumdownloader --source [pkg-name]
    or use `wget` to fetch from one of the mirrors directly:
      $ wget \
        https://mirror.chpc.utah.edu/pub/vault.centos.org/[CentOS-version]/os/Source/SPackages/[pkg-rpm] \
        --no-check-certificate
  # One can get your installed CentOS version info from /etc/centos-release.
    $ cat /etc/centos-release

  # One can verify the installed version of the library via `yum list`:
    $ yum list | grep libpciaccess.x86_64
      Output: libpciaccess.x86_64           0.14-1.el7           @base

  In the following examples, the CentOS version is 7.6.1810, and library's
  version is determined accordingly.

  $ wget \
      https://mirror.chpc.utah.edu/pub/vault.centos.org/7.6.1810/os/Source/SPackages/libpciaccess-0.14-1.el7.src.rpm \
      --no-check-certificate
  $ rpm2cpio libpciaccess-0.14-1.el7.src.rpm | cpio -idv
  $ tar xf libpciaccess-0.14.tar.bz2
  $ cd libpciaccess-0.14/
  $ patch -Np1 < ../libpciaccess-rom-size.patch
  $ ./configure --prefix=$HOME/local_install
  $ make install

b. Download and install libxml2
  # FIXME: make install would end in error for installing python but libxml2.a
    should be installed to destination folder before we reach to the error
  $ cd $HOME
  $ mkdir libxml2
  $ cd libxml2/
  $ wget \
      https://mirror.chpc.utah.edu/pub/vault.centos.org/7.6.1810/os/Source/SPackages/libxml2-2.9.1-6.el7_2.3.src.rpm \
      --no-check-certificate
  $ rpm2cpio libxml2-2.9.1-6.el7_2.3.src.rpm | cpio -idv
  $ tar xf libxml2-2.9.1.tar.gz
  $ cd libxml2-2.9.1/
  $ patch -Np1 < ../libxml2-multilib.patch
  $ patch -Np1 < ../libxml2-2.9.0-do-not-check-crc.patch
  $ patch -Np1 < ../libxml2-Fix-a-regression-in-xmlGetDocCompressMode.patch
  $ patch -Np1 < ../CVE-2014-3660-rhel7.patch
  $ patch -Np1 < ../libxml2-Fix-missing-entities-after-CVE-2014-3660-fix.patch
  $ patch -Np1 < ../libxml2-Do-not-fetch-external-parameter-entities.patch
  $ patch -Np1 < ../libxml2-Fix-regression-introduced-by-CVE-2014-0191.patch
  $ patch -Np1 < ../libxml2-Stop-parsing-on-entities-boundaries-errors.patch
  $ patch -Np1 < ../libxml2-Cleanup-conditional-section-error-handling.patch
  $ patch -Np1 < ../libxml2-Fail-parsing-early-on-if-encoding-conversion-failed.patch
  $ patch -Np1 < ../libxml2-Another-variation-of-overflow-in-Conditional-sections.patch
  $ patch -Np1 < ../libxml2-Fix-an-error-in-previous-Conditional-section-patch.patch
  $ patch -Np1 < ../libxml2-Fix-parsing-short-unclosed-comment-uninitialized-access.patch
  $ patch -Np1 < ../libxml2-Avoid-extra-processing-of-MarkupDecl-when-EOF.patch
  $ patch -Np1 < ../libxml2-Avoid-processing-entities-after-encoding-conversion-failures.patch
  $ patch -Np1 < ../libxml2-xmlStopParser-reset-errNo.patch
  $ patch -Np1 < ../libxml2-CVE-2015-7497-Avoid-an-heap-buffer-overflow-in-xmlDictComputeFastQKey.patch
  $ patch -Np1 < ../libxml2-CVE-2015-5312-Another-entity-expansion-issue.patch
  $ patch -Np1 < ../libxml2-Add-xmlHaltParser-to-stop-the-parser.patch
  $ patch -Np1 < ../libxml2-Reuse-xmlHaltParser-where-it-makes-sense.patch
  $ patch -Np1 < ../libxml2-Do-not-print-error-context-when-there-is-none.patch
  $ patch -Np1 < ../libxml2-Detect-incoherency-on-GROW.patch
  $ patch -Np1 < ../libxml2-Fix-some-loop-issues-embedding-NEXT.patch
  $ patch -Np1 < ../libxml2-Bug-on-creating-new-stream-from-entity.patch
  $ patch -Np1 < ../libxml2-CVE-2015-7500-Fix-memory-access-error-due-to-incorrect-entities-boundaries.patch
  $ patch -Np1 < ../libxml2-CVE-2015-8242-Buffer-overead-with-HTML-parser-in-push-mode.patch
  $ patch -Np1 < ../libxml2-CVE-2015-1819-Enforce-the-reader-to-run-in-constant-memory.patch
  $ patch -Np1 < ../libxml2-Add-missing-increments-of-recursion-depth-counter-to-XML-parser.patch
  $ patch -Np1 < ../libxml2-Avoid-building-recursive-entities.patch
  $ patch -Np1 < ../libxml2-Bug-757711-heap-buffer-overflow-in-xmlFAParsePosCharGroup-https-bugzilla.gnome.org-show_bug.cgi-id-757711.patch
  $ patch -Np1 < ../libxml2-Bug-758588-Heap-based-buffer-overread-in-xmlParserPrintFileContextInternal-https-bugzilla.gnome.org-show_bug.cgi-id-758588.patch
  $ patch -Np1 < ../libxml2-Bug-758605-Heap-based-buffer-overread-in-xmlDictAddString-https-bugzilla.gnome.org-show_bug.cgi-id-758605.patch
  $ patch -Np1 < ../libxml2-Bug-759398-Heap-use-after-free-in-xmlDictComputeFastKey-https-bugzilla.gnome.org-show_bug.cgi-id-759398.patch
  $ patch -Np1 < ../libxml2-Bug-763071-heap-buffer-overflow-in-xmlStrncat-https-bugzilla.gnome.org-show_bug.cgi-id-763071.patch
  $ patch -Np1 < ../libxml2-Fix-inappropriate-fetch-of-entities-content.patch
  $ patch -Np1 < ../libxml2-Fix-some-format-string-warnings-with-possible-format-string-vulnerability.patch
  $ patch -Np1 < ../libxml2-Heap-based-buffer-overread-in-htmlCurrentChar.patch
  $ patch -Np1 < ../libxml2-Heap-based-buffer-overread-in-xmlNextChar.patch
  $ patch -Np1 < ../libxml2-Heap-based-buffer-underreads-due-to-xmlParseName.patch
  $ patch -Np1 < ../libxml2-Heap-use-after-free-in-htmlParsePubidLiteral-and-htmlParseSystemiteral.patch
  $ patch -Np1 < ../libxml2-Heap-use-after-free-in-xmlSAX2AttributeNs.patch
  $ patch -Np1 < ../libxml2-More-format-string-warnings-with-possible-format-string-vulnerability.patch
  $ ./configure --prefix=$HOME/local_install
  $ make -j install

c. Download and install zlib
  $ cd $HOME
  $ mkdir zlib
  $ cd zlib/
  $ wget \
      https://mirror.chpc.utah.edu/pub/vault.centos.org/7.6.1810/os/Source/SPackages/zlib-1.2.7-18.el7.src.rpm \
      --no-check-certificate
  $ rpm2cpio zlib-1.2.7-18.el7.src.rpm | cpio -idv
  $ tar xf zlib-1.2.7.tar.bz2
  $ cd zlib-1.2.7/
  $ patch -Np1 < ../zlib-1.2.5-minizip-fixuncrypt.patch
  $ patch -Np1 < ../zlib-1.2.7-optimized-s390.patch
  $ patch -Np1 < ../zlib-1.2.7-z-block-flush.patch
  $ patch -Np1 < ../zlib-1.2.7-fix-serious-but-very-rare-decompression-bug-in-inftr.patch
  $ patch -Np1 < ../zlib-1.2.7-Fix-bug-where-gzopen-gzclose-would-write-an-empty-fi.patch
  $ ./configure --prefix=$HOME/local_install
  $ make install

d. Download and install libxz (for liblzma)
  $ cd $HOME
  $ mkdir libxz
  $ cd libxz
  $ wget \
      https://mirror.chpc.utah.edu/pub/vault.centos.org/7.6.1810/os/Source/SPackages/xz-5.2.2-1.el7.src.rpm \
      --no-check-certificate
  $ rpm2cpio xz-5.2.2-1.el7.src.rpm | cpio -idv
  $ tar xf xz-5.2.2.tar.gz
  $ cd xz-5.2.2/
  $ patch -Np1 <../xz-5.2.2-compat-libs.patch
  $ patch -Np1 <../xz-5.2.2-man-page-day.patch
  $ ./configure --prefix=$HOME/local_install
  $ make -j install

e. Download and install MPICH from source using locally installed libraries
  $ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/local_install/lib
  $ mkdir $HOME/mpich-static/
  $ wget \
      https://www.mpich.org/static/downloads/3.3.2/mpich-3.3.2.tar.gz \
      --no-check-certificate
  $ tar xzf mpich-3.3.2.tar.gz
  $ cd mpich-3.3.2
  $ ./configure --prefix=$HOME/mpich-static/
  $ make -j install

NOTE: In some cases, where there's an Nvidia GPU is installed, one may need to
  install extra libraries (e.g., libX11, libXau, libXext, libxcb) similarly
  as mentioned above.

### CENTOS 8 STREAM ###

These steps are largely similar to the ones above. The SCL repository no longer
exists on CentOS 8 Stream, and instead the relevant tools are included in
Development Tools.

  $ dnf install -y git
  $ dnf groupinstall 'Development Tools'
  $ dnf install -y mlocate vim wget

At the time of writing (11 Mar 2022), the updated versions of glibc can build
a static copy neither stably nor reliably, so we have to fetch an earlier
version of it. We use glibc-static-2.17, the version that CentOS 7 uses.

  $ wget \
      http://mirror.centos.org/centos/7/os/x86_64/Packages/glibc-static-2.17-317.el7.x86_64.rpm \
      --no-check-certificate
  $ rpm2cpio glibc-static-2.17-317.el7.x86_64.rpm | cpio -idv
  $ cp ./usr/lib64/* /usr/lib64

### INSTALLING DYNAMIC AND STATIC MPI LIBRARIES ###

On CentOS, MANA uses mpich-3.3.2, along with some other static libraries for
MPI function calls. We'll need to install them first, then point MANA to these
libraries through certain environment variables while doing ./configure. A
streamlined way of doing so is provided through ./configure-mana. Note that
these libraries have to be static.

a. Download and install libxml2
  $ wget \
      https://buildlogs.centos.org/c7.1511.u/libxml2/20160623141405/2.9.1-6.el7_2.3.x86_64/libxml2-static-2.9.1-6.el7_2.3.x86_64.rpm \
      --no-check-certificate
  $ rpm2cpio libxml2-static-2.9.1-6.el7_2.3.x86_64.rpm | cpio -idv
  $ cp ./usr/lib64/libxml2.a /usr/lib64

b. Download and install zlib
  $ dnf config-manager --set-enabled powertools
  $ dnf install zlib-static

c. Install libxz
  $ dnf install -y xz-devel

d. Download and install liblzma
  $ wget \
      http://vault.centos.org/8-stream/BaseOS/Source/SPackages/xz-5.2.4-3.el8.src.rpm \
      --no-check-certificate 
  $ rpm2cpio xz-5.2.4-3.el8.src.rpm | cpio -idv
  $ tar xf xz-5.2.4.tar.xz
  $ ./configure --enable-static
  $ make
  $ cp ./src/liblzma/.libs/liblzma.a /usr/lib64/

e. Download and install mpich
  $ dnf install -y gcc-gfortran.x86_64
  $ wget \
      https://www.mpich.org/static/downloads/3.3.2/mpich-3.3.2.tar.gz \
      --no-check-certificate
  $ tar xzf mpich-3.3.2.tar.gz
  $ cd mpich-3.3.2
  $ ./configure
  $ make -j install

2. Installing the MANA directory and compiling MANA
In this tutorial, we'll install MANA in the home directory.
  $ cd $HOME
  $ git clone https://github.com/mpickpt/mana.git
  $ cd mana
  $ git submodule update --init
  $ ./configure-mana
  $ make -j mana

Here, we note that the locations of some libraries and commands differ based on
what operating system you're using, as well as where these packages are
installed. In configure-mana, we have:

  MPI_BIN=/usr/local/bin
  MPI_INCLUDE=/usr/local/include
  MPI_LIB=/usr/local/lib
  MPICC='${MPI_BIN}/mpicc'
  MPICXX='${MPI_BIN}/mpic++'
  MPIRUN='${MPI_BIN}/mpirun -iface '${MPI_ETHERNET_INTERFACE}
  MPI_LD_FLAG=-lmpich

These are the default locations MANA assumes you have installed these packages:

  /usr/local/bin/mpicc
  /usr/local/bin/mpic++
  /usr/local/include/mpi.h
  /usr/local/lib/libmpi.a
  /usr/local/lib/libmpi.so

However, depending on where you have installed certain libraries, these
environment variables can be changed accordingly, but if you've been following
these instructions, then specific changes beyond applying the patch will not be
necessary.

This should build MANA smoothly.

B. LAUNCHING, CHECKPOINTING, AND RESTARTING A MPI APPLICATION

We'll first add the bin directory to PATH. Ensure that these commands are done
from within the root directory of MANA.

  $ echo 'export PATH=$PATH:{MANA_ROOT}/bin' >> ~/.bashrc
  $ source ~/.bashrc

If you've been following this tutorial precisely, then {MANA_ROOT} should be
/home/{YOUR USERNAME}/mana.

1. Launching an MPI application

The MANA directory comes with many test MPI applications that can be found in
contrib/mpi-proxy-plugin/test. Depending on the application, we may require
more than one copy of the process running -- for example, ping_pong.mana.exe
requires two. To support this, change the argument after -np accordingly. For this
tutorial, we'll use mpi_hello_world.mana.exe, which only requires one copy
running.

  $ mana_coordinator
  $ mpirun -np 1 mana_launch \
      contrib/mpi-proxy-split/test/mpi_hello_world.mana.exe

If the application is launched properly, you should see the following printed:

  Hello world from processor test, rank 0 out of 1 processors
  Will now sleep for 500 seconds ...

From here, we can either exit the program (through CTRL-C), or continue on to
the next set of instructions to checkpoint and restart the application.

2. Checkpointing an MPI application

Here, we want to either open another terminal, or have the launched MPI
application be open in the background. The following demonstrates the latter.

If an application is already launched, we do CTRL-Z, followed by:

  $ bg

Otherwise, we'll launch an application the same way as above, but as a
background process (note the &).

  $ mana_coordinator
  $ mpirun -np 1 mana_launch \
      contrib/mpi-proxy-split/test/mpi_hello_world.mana.exe &

Subsequently, we only need the following command to checkpoint the application.

  $ mana_status --checkpoint

This creates one, or multiple, folder(s) in the current directory depending on
the number of copies of the process running, ckpt_rank_{RANK OF PROCESS}, each
containing checkpoint images. It is important to note that while these folders
can be found, mana_launch cannot be executed.

This is an example of manual checkpointing, and there are other ways of
checkpointing applications. The second is to use interval checkpointing with
the -i flag of mana_launch; more information can be found on the MANA manpage
(in section C). The third is to modify the MPI application so that one and only
one MPI process uses the mechanism outlined in
MANA_ROOT/test/plugin/applic-initiated-ckpt.

3. Restarting an MPI application

To restart the application, we do the following:

  $ mana_coordinator
  $ mpirun -np 1 mana_restart

By default, the mana_restart command looks for ckpt_rank_* folders in the
current directory to restart, and will fail if such folders cannot be found.
You can use the --restartdir flag of mana_restart to specify which directory
to look for such folders; more information can be found on the MANA manpage
(in section C).

Depending on whether there is another instance of mana_coordinator running, we
may need to either close all other instances or launch a coordinator with a
port different from the default 7779.

  $ mana_coordinator -p 7780

If the restart is successful, then you should see something similar to the
following printed:

  [17847] mtcp_restart.c:803 main:
    [Rank: 0] Choosing ckpt image: ./ckpt_rank_0/ckpt_mpi_hello_world.mana.exe_
      7c4af7b7e161f9fd-40000-1000f911e89fa5.dmtcp
  Signal received; continuing sleep for 294 seconds.

C. MISCELLANEOUS RESOURCES

For more information on MANA, you may refer to the manpage in the directory.
From the root MANA directory, do:

  $ nroff -man manpages/mana.1

D. CAVEATS
At the time of this writing (3rd Dec 2021), runtime overhead can be significant
for MPI applications that make very frequent calls to MPI functions. This is a
known issue, and future versions will have lower runtime overhead.
